From 52cc57a49526fbf3ca3c96e58c7f9ac6867de007 Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Sun, 13 Sep 2015 11:11:39 -0400
Subject: [PATCH 1/3] Detect RCU read-side underflows

Use the urcu_assert() macro (enabled on DEBUG_RCU) to check for
unmatched rcu_read_unlock() that leads to nesting counter underflow in
urcu.h and urcu-bp.h.

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Signed-off-by: Srikanth_Krishnakar@mentor.com <Srikanth_Krishnakar@mentor.com>
---
 urcu/static/urcu-bp.h | 10 ++++++----
 urcu/static/urcu.h    |  5 +++--
 2 files changed, 9 insertions(+), 6 deletions(-)

diff --git a/urcu/static/urcu-bp.h b/urcu/static/urcu-bp.h
index b6d5f13..d9740d0 100644
--- a/urcu/static/urcu-bp.h
+++ b/urcu/static/urcu-bp.h
@@ -169,11 +169,13 @@ static inline void _rcu_read_lock(void)
  */
 static inline void _rcu_read_unlock(void)
 {
-	/*
-	 * Finish using rcu before decrementing the pointer.
-	 */
+	unsigned long tmp;
+
+	tmp = URCU_TLS(rcu_reader)->ctr;
+	urcu_assert(tmp & RCU_GP_CTR_NEST_MASK);
+	/* Finish using rcu before decrementing the pointer. */
 	cmm_smp_mb();
-	_CMM_STORE_SHARED(URCU_TLS(rcu_reader)->ctr, URCU_TLS(rcu_reader)->ctr - RCU_GP_COUNT);
+	_CMM_STORE_SHARED(URCU_TLS(rcu_reader)->ctr, tmp - RCU_GP_COUNT);
 	cmm_barrier();	/* Ensure the compiler does not reorder us with mutex */
 }
 
diff --git a/urcu/static/urcu.h b/urcu/static/urcu.h
index 6990c60..589886b 100644
--- a/urcu/static/urcu.h
+++ b/urcu/static/urcu.h
@@ -235,11 +235,11 @@ static inline void _rcu_read_unlock_update_and_wakeup(unsigned long tmp)
 {
 	if (caa_likely((tmp & RCU_GP_CTR_NEST_MASK) == RCU_GP_COUNT)) {
 		smp_mb_slave(RCU_MB_GROUP);
-		_CMM_STORE_SHARED(URCU_TLS(rcu_reader).ctr, URCU_TLS(rcu_reader).ctr - RCU_GP_COUNT);
+		_CMM_STORE_SHARED(URCU_TLS(rcu_reader).ctr, tmp - RCU_GP_COUNT);
 		smp_mb_slave(RCU_MB_GROUP);
 		wake_up_gp();
 	} else
-		_CMM_STORE_SHARED(URCU_TLS(rcu_reader).ctr, URCU_TLS(rcu_reader).ctr - RCU_GP_COUNT);
+		_CMM_STORE_SHARED(URCU_TLS(rcu_reader).ctr, tmp - RCU_GP_COUNT);
 }
 
 /*
@@ -252,6 +252,7 @@ static inline void _rcu_read_unlock(void)
 	unsigned long tmp;
 
 	tmp = URCU_TLS(rcu_reader).ctr;
+	urcu_assert(tmp & RCU_GP_CTR_NEST_MASK);
 	_rcu_read_unlock_update_and_wakeup(tmp);
 	cmm_barrier();	/* Ensure the compiler does not reorder us with mutex */
 }
-- 
1.9.1

