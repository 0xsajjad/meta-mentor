# Author: Andreas Pape <apape@de.adit-jv.com>
# Date:   Tue Sep 3 10:00:00 2013 +0200
# pcm direct plugins: allow users to configure different period sizes.
#
# Feature is enabled by default and can be disabled by adding config option 'var_periodsize 0'.
# Effective period size can be a multiple of the slave-pcm period size.
# This patch is intended to save cpu workload if e.g. slave operates with very small periods
# but a user does not need that small periods.
#


diff -Nur alsa-lib-1.0.25.orig/src/pcm/pcm_direct.c alsa-lib-1.0.25/src/pcm/pcm_direct.c
--- alsa-lib-1.0.25.orig/src/pcm/pcm_direct.c	2013-09-02 17:16:27.168034669 +0200
+++ alsa-lib-1.0.25/src/pcm/pcm_direct.c	2013-09-03 08:27:10.620474919 +0200
@@ -665,7 +665,11 @@
					(1<<SNDRV_PCM_ACCESS_RW_NONINTERLEAVED),
					0, 0, 0 } };
	int err;
-
+	snd_interval_t period_size;
+	snd_interval_t period_time;
+	snd_interval_t buffer_size;
+	snd_interval_t* p_period_size;
+	snd_interval_t* p_period_time;
 #ifdef REFINE_DEBUG
	snd_output_t *log;
	snd_output_stdio_attach(&log, stderr, 0);
@@ -703,15 +707,17 @@
					   &dshare->shmptr->hw.rate);
	if (err < 0)
		return err;
-	err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_PERIOD_SIZE,
-					   &dshare->shmptr->hw.period_size);
-	if (err < 0)
-		return err;
-	err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_PERIOD_TIME,
-					   &dshare->shmptr->hw.period_time);
-	if (err < 0)
-		return err;
+
	if (dshare->max_periods < 0) {
+		err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_PERIOD_SIZE,
+						   &dshare->shmptr->hw.period_size);
+		if (err < 0)
+			return err;
+		err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_PERIOD_TIME,
+						   &dshare->shmptr->hw.period_time);
+		if (err < 0)
+			return err;
+
		err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_BUFFER_SIZE,
						   &dshare->shmptr->hw.buffer_size);
		if (err < 0)
@@ -723,11 +729,49 @@
	} else if (params->rmask & ((1<<SND_PCM_HW_PARAM_PERIODS)|
				    (1<<SND_PCM_HW_PARAM_BUFFER_BYTES)|
				    (1<<SND_PCM_HW_PARAM_BUFFER_SIZE)|
-				    (1<<SND_PCM_HW_PARAM_BUFFER_TIME))) {
+				    (1<<SND_PCM_HW_PARAM_BUFFER_TIME)|
+				    (1<<SND_PCM_HW_PARAM_PERIOD_TIME)|
+				    (1<<SND_PCM_HW_PARAM_PERIOD_SIZE)|
+				    (1<<SND_PCM_HW_PARAM_PERIOD_BYTES))) {
		int changed;
		unsigned int max_periods = dshare->max_periods;
		if (max_periods < 2)
			max_periods = dshare->slave_buffer_size / dshare->slave_period_size;
+
+
+		p_period_size = &dshare->shmptr->hw.period_size;
+		p_period_time = &dshare->shmptr->hw.period_time;
+
+		if (dshare->var_periodsize) {
+			period_size = dshare->shmptr->hw.period_size;
+			period_time = dshare->shmptr->hw.period_time;
+			buffer_size = dshare->shmptr->hw.buffer_size;
+
+			/*more tolerant settings...*/
+			if((dshare->shmptr->hw.buffer_size.max / 2) > period_size.max)
+				period_size.max = dshare->shmptr->hw.buffer_size.max / 2;
+			if((dshare->shmptr->hw.buffer_time.max / 2) > period_time.max)
+				period_time.max = dshare->shmptr->hw.buffer_time.max / 2;
+			buffer_size.min = 2 * dshare->shmptr->hw.period_size.min;
+
+			p_period_size = &period_size;
+			p_period_time = &period_time;
+
+			err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_BUFFER_SIZE,
+						   &buffer_size);
+			if (err < 0)
+				return err;
+		}
+
+		err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_PERIOD_SIZE,
+						   p_period_size);
+		if (err < 0)
+			return err;
+		err = hw_param_interval_refine_one(params, SND_PCM_HW_PARAM_PERIOD_TIME,
+						   p_period_time);
+		if (err < 0)
+			return err;
+
		do {
			changed = 0;
			err = hw_param_interval_refine_minmax(params, SND_PCM_HW_PARAM_PERIODS,
@@ -741,6 +785,7 @@
			changed |= err;
		} while (changed);
	}
+	dshare->timer_ticks = hw_param_interval(params, SND_PCM_HW_PARAM_PERIOD_SIZE)->max/dshare->slave_period_size;
	params->info = dshare->shmptr->s.info;
 #ifdef REFINE_DEBUG
	snd_output_puts(log, "DMIX REFINE (end):\n");
@@ -1099,6 +1144,7 @@

	dmix->tread = 1;
	dmix->timer_need_poll = 0;
+	dmix->timer_ticks = 1;
	snd_pcm_info_alloca(&info);
	ret = snd_pcm_info(dmix->spcm, info);
	if (ret < 0) {
@@ -1280,7 +1326,7 @@
	snd_timer_params_set_auto_start(params, 1);
	if (dmix->type != SND_PCM_TYPE_DSNOOP)
		snd_timer_params_set_early_event(params, 1);
-	snd_timer_params_set_ticks(params, 1);
+	snd_timer_params_set_ticks(params, dmix->timer_ticks);
	if (dmix->tread) {
		filter = (1<<SND_TIMER_EVENT_TICK) |
			 dmix->timer_events;
@@ -1556,6 +1602,7 @@
	rec->ipc_gid = -1;
	rec->slowptr = 1;
	rec->max_periods = 0;
+	rec->var_periodsize = 1;

	/* read defaults */
	if (snd_config_search(root, "defaults.pcm.dmix_max_periods", &n) >= 0) {
@@ -1655,6 +1702,13 @@
			rec->max_periods = val;
			continue;
		}
+		if (strcmp(id, "var_periodsize") == 0) {
+			err = snd_config_get_bool(n);
+			if (err < 0)
+				return err;
+			rec->var_periodsize = err;
+			continue;
+		}
		SNDERR("Unknown field %s", id);
		return -EINVAL;
	}
diff -Nur alsa-lib-1.0.25.orig/src/pcm/pcm_direct.h alsa-lib-1.0.25/src/pcm/pcm_direct.h
--- alsa-lib-1.0.25.orig/src/pcm/pcm_direct.h	2013-09-02 17:16:27.168034669 +0200
+++ alsa-lib-1.0.25/src/pcm/pcm_direct.h	2013-09-03 07:56:59.707985971 +0200
@@ -146,12 +146,14 @@
	int tread: 1;
	int timer_need_poll: 1;
	unsigned int timer_events;
+	unsigned int timer_ticks;
	int server_fd;
	pid_t server_pid;
	snd_timer_t *timer; 		/* timer used as poll_fd */
	int interleaved;	 	/* we have interleaved buffer */
	int slowptr;			/* use slow but more precise ptr updates */
	int max_periods;		/* max periods (-1 = fixed periods, 0 = max buffer size) */
+	int var_periodsize;		/* allow variable period size if max_periods is != -1*/
	unsigned int channels;		/* client's channels */
	unsigned int *bindings;
	union {
@@ -299,6 +301,7 @@ struct snd_pcm_direct_open_conf {
	int ipc_gid;
	int slowptr;
	int max_periods;
+	int var_periodsize;
	snd_config_t *slave;
	snd_config_t *bindings;
 };
diff -Nur alsa-lib-1.0.25.orig/src/pcm/pcm_dmix.c alsa-lib-1.0.25/src/pcm/pcm_dmix.c
--- alsa-lib-1.0.25.orig/src/pcm/pcm_dmix.c	2013-09-02 17:18:00.510427342 +0200
+++ alsa-lib-1.0.25/src/pcm/pcm_dmix.c	2013-09-02 17:17:42.740427716 +0200
@@ -1007,6 +1007,7 @@
	dmix->state = SND_PCM_STATE_OPEN;
	dmix->slowptr = opts->slowptr;
	dmix->max_periods = opts->max_periods;
+	dmix->var_periodsize = opts->var_periodsize;
	dmix->sync_ptr = snd_pcm_dmix_sync_ptr;

	if (first_instance) {
diff -Nur alsa-lib-1.0.25.orig/src/pcm/pcm_dshare.c alsa-lib-1.0.25/src/pcm/pcm_dshare.c
--- alsa-lib-1.0.25.orig/src/pcm/pcm_dshare.c	2013-09-02 17:16:27.168034669 +0200
+++ alsa-lib-1.0.25/src/pcm/pcm_dshare.c	2013-09-03 07:55:18.668060003 +0200
@@ -695,6 +695,7 @@
	dshare->state = SND_PCM_STATE_OPEN;
	dshare->slowptr = opts->slowptr;
	dshare->max_periods = opts->max_periods;
+	dshare->var_periodsize = opts->var_periodsize;
	dshare->sync_ptr = snd_pcm_dshare_sync_ptr;

	if (first_instance) {
diff -Nur alsa-lib-1.0.25.orig/src/pcm/pcm_dsnoop.c alsa-lib-1.0.25/src/pcm/pcm_dsnoop.c
--- alsa-lib-1.0.25.orig/src/pcm/pcm_dsnoop.c	2013-09-02 17:16:27.168034669 +0200
+++ alsa-lib-1.0.25/src/pcm/pcm_dsnoop.c	2013-09-03 07:54:53.947972959 +0200
@@ -601,6 +601,7 @@
	dsnoop->state = SND_PCM_STATE_OPEN;
	dsnoop->slowptr = opts->slowptr;
	dsnoop->max_periods = opts->max_periods;
+	dsnoop->var_periodsize = opts->var_periodsize;
	dsnoop->sync_ptr = snd_pcm_dsnoop_sync_ptr;

	if (first_instance) {
