#!/usr/bin/env python

import argparse
import collections
import contextlib
import glob
import os
import signal
import sys


glob_default = './*/:./*/*/:{scriptdir}/../../*/:{scriptdir}/../../*/*/'
layers_default = 'core'
override_default = ''


class Terminate(BaseException):
    """Exception raised if we receive a SIGTERM"""
    pass


def sigterm_exception(signum, stackframe):
    """Raise Terminate exception if we receive a SIGTERM"""
    raise Terminate()


def setup_command_import(command, relpath='../lib'):
    """Set up sys.path based on the location of a binary in the PATH """
    PATH = os.environ['PATH'].split(':')
    cmd_paths = [os.path.join(path, relpath)
                 for path in PATH if os.path.exists(os.path.join(path, command))]
    if not cmd_paths:
        raise ImportError("Unable to locate bb, please ensure PATH is set correctly.")

    sys.path[0:0] = cmd_paths


def find(dir, dirfilter=None, **walkoptions):
    """ Given a directory, recurse into that directory,
    returning all files as absolute paths. """

    for root, dirs, files in os.walk(dir, **walkoptions):
        if dirfilter is not None:
            for d in dirs:
                if not dirfilter(d):
                    dirs.remove(d)

        for file in files:
            yield os.path.join(root, file)


class StatusDisplay(object):
    """Show the user what we're doing, and whether we succeed"""

    def __init__(self, message, output=None):
        self.message = message
        if output is None:
            output = sys.stderr
        self.output = output
        self.finished = False

    def __enter__(self):
        self.output.write('{}..'.format(self.message))
        self.output.flush()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if self.finished:
            return

        if not exc_type:
            self.set_status('done')
        elif isinstance(exc_value, KeyboardInterrupt):
            self.set_status('interrupted')
        elif isinstance(exc_value, Terminate):
            self.set_status('terminated')
        else:
            self.set_status('failed')

    def set_status(self, finishmessage):
        if self.finished:
            raise Exception("Status is already finished")
        self.output.write('.' + finishmessage + '\n')
        self.finished = True


status = StatusDisplay


class DictArgument(object):
    def __init__(self, listsep=None, valuesep='=', keytype=None, valuetype=None):
        self.listsep = listsep
        self.valuesep = valuesep
        self.keytype = keytype
        self.valuetype = valuetype

    def __call__(self, string):
        d = {}
        for o in string.split(self.listsep):
            try:
                k, v = o.rsplit(self.valuesep, 1)
            except ValueError:
                raise argparse.ArgumentTypeError('invalid entry `{0}`'.format(o))

            if self.keytype is not None:
                try:
                    k = self.keytype(k)
                except ValueError:
                    raise argparse.ArgumentTypeError('invalid key `{0}` for type `{1}`'.format(k, self.keytype.__name__))

            if self.valuetype is not None:
                try:
                    v = self.valuetype(v)
                except ValueError:
                    raise argparse.ArgumentTypeError('invalid value `{0}` for type `{1}`'.format(v, self.valuetype.__name__))

            d[k] = v
        return d

    def __repr__(self):
        return 'DictArgument(listsep={0}, valuesep={1}, keytype={2}, valuetype={3})'.format(repr(self.listsep), repr(self.valuesep), repr(self.keytype), repr(self.valuetype))


def process_arguments(cmdline_args):
    parser = argparse.ArgumentParser(description='Determine the bitbake layers to use for a given machine, with sanity checks')
    parser.add_argument('-l', '--layers', default=layers_default,
            help='base layers to include. space separated. default: `{0}`'.format(layers_default))
    parser.add_argument('-o', '--optional-layers', default='',
            help='optional layers to include. space separated.')
    parser.add_argument('-e', '--extra-layers', default='',
            help='extra layers to include. space separated. These layers are expected to exist, but are only included if their dependencies are already included in the configuration.')
    parser.add_argument('-x', '--excluded-layers', default='',
            help='explicit layers to excluded. space separated.')
    parser.add_argument('-O', '--override-layer-priorities', default=override_default,
            type=DictArgument(valuetype=int),
            help='override the priority of one or more layers. space separated list of layername=priority values. default: `{0}`'.format(override_default))
    parser.add_argument('-g', '--globs', default=glob_default,
            help='wildcard patterns to locate layers. colon separated. default: `{0}`'.format(glob_default))
    parser.add_argument('-p', '--paths',
            help='paths to search recursively to find layers. colon separated. equivalent to the "find" command', default='')
    parser.add_argument('machine', help='machine to use when selecting bsp layers')

    scriptdir = os.path.dirname(__file__)
    args = parser.parse_args(cmdline_args)

    args.layers = args.layers.split()
    args.optional_layers = args.optional_layers.split()
    args.excluded_layers = args.excluded_layers.split()
    args.extra_layers = args.extra_layers.split()

    new_globs = []
    for pattern in args.globs.split(':'):
        pattern = os.path.abspath(pattern.format(scriptdir=scriptdir))
        new_globs.append(pattern)
    args.globs = new_globs

    new_paths = []
    if args.paths:
        for path in args.paths.split(':'):
            path = os.path.abspath(path.format(scriptdir=scriptdir))
            new_paths.append(path)
    args.paths = new_paths

    return args


class LayerError(Exception):
    pass


class Layer(object):
    def __init__(self, path, confpath, name, priority, pattern, depends):
        self.path = path
        self.confpath = confpath
        self.name = name
        self.priority = priority
        self.depends = depends
        self.missingdeps = set()
        self.pattern = pattern

    def __repr__(self):
        return 'Layer(%s, %s, %s, %s, %s, %s)' % (repr(self.path), repr(self.confpath), repr(self.name), repr(self.priority), repr(self.pattern), repr(self.depends))

    def __hash__(self):
        return hash(repr(self))

    @staticmethod
    def from_layerpath(layer_path, data=None):
        layers = []

        if data is None:
            data = bb.data.init()
            bb.parse.init_parser(data)

        lconf = os.path.join(layer_path, 'conf', 'layer.conf')
        ldata = data.createCopy()
        ldata.setVar('LAYERDIR', layer_path)
        try:
            ldata = bb.parse.handle(lconf, ldata, include=True)
        except BaseException as exc:
            raise LayerError(exc)
        ldata.expandVarref('LAYERDIR')

        bbfile_collections = (ldata.getVar('BBFILE_COLLECTIONS', True) or '').split()
        if not bbfile_collections:
            name = os.path.basename(layer_path)
            l = Layer(layer_path, lconf, name, 0, None, set())
            layers.append(l)

        for name in bbfile_collections:
            pattern = ldata.getVar('BBFILE_PATTERN_%s' % name, True)
            priority = ldata.getVar('BBFILE_PRIORITY_%s' % name, True) or 0
            depends = ldata.getVar('LAYERDEPENDS_%s' % name, True) or ''

            l = Layer(layer_path, lconf, name, int(priority), pattern, set(depends.split()))
            layers.append(l)

        if layers:
            return layers


class Layers(collections.MutableSet):
    def __init__(self, iterable=None):
        self.layers = set()
        self.by_path = {}
        self.by_name = {}

        if iterable is not None:
            self |= iterable

    def add(self, layer):
        if layer.name in self.by_name:
            raise Exception("Layer name '{0}' found more than once", layer.name)

        if layer.path in self.by_path:
            return

        self.layers.add(layer)
        self.by_path[layer.path] = layer
        self.by_name[layer.name] = layer

    def add_from_path(self, layerpath, data=None):
        self |= Layer.from_layerpath(os.path.realpath(layerpath), data)

    def discard(self, layer):
        self.layers.discard(layer)
        del self.by_path[layer.path]
        del self.by_name[layer.name]

    def clear(self):
        self.layers.clear()
        self.by_path.clear()
        self.by_name.clear()

    def __contains__(self, layer):
        return layer in self.layers
        #return layer.path in self.by_path

    def __iter__(self):
        return iter(self.layers)

    def __len__(self):
        return len(self.layers)


def resolve_dependencies(layers_by_name):
    missing_dependencies = collections.defaultdict(set)

    for layer in layers_by_name.values():
        missing_layer_deps = set()
        new_deps = set()

        for depname in layer.depends:
            dep = layers_by_name.get(depname)
            if not dep:
                missing_layer_deps.add(depname)
            else:
                new_deps.add(dep)

        layer.depends = new_deps
        if missing_layer_deps:
            layer.missingdeps |= missing_layer_deps
            missing_dependencies[layer] = missing_layer_deps

    return missing_dependencies


class MissingDeps(Exception):
    def __init__(self, layer, deps):
        self.layer = layer
        self.deps = deps
        Exception.__init__(self)

    def __str__(self):
        return 'Layer `{}` has missing dependencies: {}'.format(self.layer, ', '.join(self.deps))


def get_configured_layers(all_layers, base_layer_names, optional_layer_names, extra_layer_names, missing_deps, machine):
    configured_layers, optional = set(), set()

    def layer_and_deps(layer, seen):
        if layer.missingdeps:
            raise MissingDeps(layer.name, layer.missingdeps)
        if layer in seen:
            return
        seen.add(layer)

        for d in layer.depends:
            for _d in layer_and_deps(d, seen):
                yield _d
        yield layer

    def add_layer(layer, configured_layers, seen):
        configured_layers |= set(layer_and_deps(layer, seen))

    seen = set()
    layers_by_name = dict((l.name, l) for l in all_layers)
    for layer in all_layers:
        if os.path.exists(os.path.join(layer.path, 'conf', 'machine',
                                       '{0}.conf'.format(machine))):
            add_layer(layer, configured_layers, seen)

    for base_name in base_layer_names:
        if base_name not in layers_by_name:
            raise Exception("Requested base layer `{}` not found".format(base_name))
        add_layer(layers_by_name[base_name], configured_layers, seen)

    for optional_name in optional_layer_names:
        if optional_name in layers_by_name:
            optional_layer = layers_by_name[optional_name]
            optional.add(optional_layer)
            try:
                add_layer(optional_layer, configured_layers, seen)
            except MissingDeps:
                pass

    for extra_name in extra_layer_names:
        layer = layers_by_name[extra_name]
        with_deps = set(layer_and_deps(layer, seen))
        with_deps.remove(layer)
        if any(dep not in configured_layers for dep in with_deps):
            continue
        else:
            configured_layers.add(layer)

    return configured_layers, optional


def get_layerpaths_bitbake(globs=None, paths=None):
    bitbake_path = None
    layer_paths = set()

    for pattern in globs:
        for glob_path in glob.glob(pattern):
            layerconf_path = os.path.join(glob_path, 'conf', 'layer.conf')
            if os.path.exists(layerconf_path):
                layer_paths.add(os.path.realpath(glob_path))
            elif os.path.exists(os.path.join(glob_path, 'bin', 'bitbake')):
                bitbake_path = os.path.join(glob_path, 'bin')

    for path in paths:
        for subpath in find(path, dirfilter=lambda d: d != 'lib'):
            if subpath.endswith('/conf/layer.conf'):
                layer_paths.add(os.path.realpath(os.path.dirname(os.path.dirname(subpath))))
            elif subpath.endswith('/bin/bitbake'):
                bitbake_path = os.path.dirname(subpath)

    return layer_paths, bitbake_path


def determine_layers(cmdline_opts):
    args = process_arguments(cmdline_opts)

    with status('Locating layers and bitbake'):
        layer_paths, bitbake_path = get_layerpaths_bitbake(args.globs, args.paths)
        if bitbake_path is not None:
            os.environ['PATH'] += ':' + bitbake_path

    setup_command_import('bitbake')
    try:
        import bb
    except (ImportError, RuntimeError) as exc:
        sys.exit("Unable to import 'bb' python package: %s" % exc)

    import bb.parse
    import bb.data

    data = bb.data.init()
    bb.parse.init_parser(data)

    all_layers = Layers()
    with status('Parsing layer configuration files'):
        for layer_path in layer_paths:
            try:
                all_layers.add_from_path(layer_path, data)
            except LayerError as exc:
                sys.exit(str(exc))

    for layer in list(all_layers):
        if layer.name in args.excluded_layers:
            all_layers.discard(layer)
        else:
            priority_override = args.override_layer_priorities.get(layer.name)
            if priority_override is not None:
                layer.priority = priority_override

    duplicates = defaultdict(set)
    with status('Resolving layer dependencies'):
        layers_by_name = {}
        for l in all_layers:
            if l.name in layers_by_name:
                duplicates[l.name].add(layers_by_name[l.name].path)
                duplicates[l.name].add(l.path)
            else:
                layers_by_name[l.name] = l

        missing_deps = resolve_dependencies(layers_by_name)

    with status("Determining layers to include for MACHINE '{0}'".format(args.machine)) as s:
        try:
            configured_layers, optional = get_configured_layers(all_layers, args.layers, args.optional_layers, args.extra_layers, missing_deps, args.machine)
        except Exception as exc:
            sys.exit('ERROR: {0}'.format(exc))
        else:
            configured_names = set(l.name for l in configured_layers)
            configured_dupes = list((n, l) for n, l in duplicates.iteritems() if n in configured_names)
            if configured_dupes:
                s.set_status('failed (duplicate layers)')
                for name, paths in configured_dupes:
                    sys.stderr.write("Multiple layer paths found for layer name '{0}':\n{1}\n".format(name, '\n'.join('  ' + p for p in sorted(paths))))
                sys.exit(1)

    for layer in optional:
        sys.stderr.write("Layer '{0}' was detected, including in configuration\n".format(layer.name))

    for layer in sorted(configured_layers, key=lambda l: (l.priority, l.name), reverse=True):
        print(layer.path)


if __name__ == '__main__':
    signal.signal(signal.SIGTERM, sigterm_exception)
    try:
        sys.exit(determine_layers(sys.argv[1:]) or 0)
    except KeyboardInterrupt:
        signal.signal(signal.SIGINT, signal.SIG_DFL)
        os.kill(os.getpid(), signal.SIGINT)
    except Terminate:
        signal.signal(signal.SIGTERM, signal.SIG_DFL)
        os.kill(os.getpid(), signal.SIGTERM)
