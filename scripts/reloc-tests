#!/bin/bash
#
# This script tests every recipe to ensure it can be successfully built from
# scratch, with all of its dependencies built from a different path in the
# filesystem, to catch relocation problems.


set -e

cleanup=
trap handle_sigint INT PIPE

handle_sigint () {
    if  [[ -n $cleanup ]]; then
        eval "$cleanup"
    fi
    trap - 2
    kill -2 $$
}

abspath () {
    local path=$1
    if [[ -n ${path##/*} ]]; then
        path=$PWD/$1
    fi
    echo $path
}


bindir=$(abspath ${0%/*})
topdir=$PWD

verbose=0
deftarget=core-image-minimal
excludetarget=pseudo-native
builttask=do_populate_sysroot
outputdir=$topdir/reloc-build

prefixes="nativesdk-"
suffixes="-native -cross -crosssdk -sdk"
excludes="external-sourcery-toolchain"
excludepatterns="(packagegroup-.*|.*-image-*.*)"
logdir=$outputdir/logs
completedfile=$outputdir/completed
excludefile=$outputdir/excluded
sstatedir=$outputdir/sstate-cache
tmpdir=$outputdir/tmp
recipelist=$outputdir/recipelist


msg_run () {
    local msg="$1"
    shift

    if [[ $verbose -eq 1 ]]; then
        printf >&2 "$msg\n"
    else
        printf >&2 "$msg..."
    fi

    local ret=0
    log_run "$@" || ret=$?
    if [ $ret -eq 0 ]; then
        if [ $verbose -eq 0 ]; then
            printf >&2 "done\n"
        fi
    fi
    return $ret
}

log_run () {
    local logfile="$1"
    shift
    local ret=0

    trap "intr=1" INT PIPE

    eval "$@ </dev/null 2>&1 >$logdir/$logfile.log &"
    local bg_pid=$!

    if [[ $verbose -eq 1 ]]; then
        tail -f $logdir/$logfile.log &
        tail_pid=$!
    fi
    wait %1 || ret=$?
    trap "" INT
    if [[ $verbose -eq 1 ]]; then
        disown $tail_pid
        kill $tail_pid
    fi

    if [[ $intr -eq 1 ]]; then
        echo >&2 "Interrupted."

        # Brute force approach, since shutting down bitbake with a signal is
        # a dicey proposition.
        disown $bg_pid
        pids=$(get_children $bg_pid)
        kill $pids 2>/dev/null
        handle_sigint
    fi
    trap handle_sigint INT PIPE

    if [[ $verbose -eq 0 && $ret -ne 0 ]]; then
        echo >&2 "Error running $@:"
        tail -n 30 $logdir/$logfile.log >&2
    fi

    return $ret
}

get_children () {
    for pid; do
        echo $pid
        local children=$(pgrep -P $pid)
        if [[ -n "$children" ]]; then
            get_children $children
        fi
    done
}

prepare_auto () {
    local suffix=$1
    touch $topdir/conf/auto.conf
    sed -i '/TMPDIR/d; /SSTATE_DIR/d; /SSTATE_MIRRORS/d;' $topdir/conf/auto.conf
    echo "TMPDIR = \"$tmpdir$suffix\"" >>$topdir/conf/auto.conf
    echo "SSTATE_DIR = \"$sstatedir$suffix\"" >>$topdir/conf/auto.conf
    echo "SSTATE_MIRRORS = \"\"" >>$topdir/conf/auto.conf
}

# Locate files with a recipe name in the path, but filter out prefixed or
# suffixed versions of the recipe name. That is, if you want 'autoconf',
# don't return an 'autoconf-native' file.
recipe_filtered_find () {
    local recipe=$1
    shift

    find "$@" | while read file; do
        local wrong_recipe=0

        for suffix in $suffixes; do
            case $(basename $file) in
                $recipe$suffix)
                    wrong_recipe=1
                    break
                    ;;
            esac
        done

        for prefix in $prefixes; do
            case $(basename $file) in
                $prefix$recipe)
                    wrong_recipe=1
                    break
                    ;;
            esac
        done

        if [ $wrong_recipe -eq 0 ]; then
            echo $file
            break
        fi
    done
}

get_sstate () {
    local sstatepath=$1
    local recipe=$2
    recipe_filtered_find $recipe $sstatepath/ -name sstate-$recipe-*.tgz
}

recipe_stamp_exists () {
    local recipe=$1
    local task=$2
    local stampdir=$3

    local stamp=$(recipe_filtered_find $recipe $stampdir/ -name $recipe-\*.$task.\*)
    test -n "$stamp"
}


target=$1
if [[ -z $target ]]; then
    target=$deftarget
fi

mkdir -p $logdir

# Prepare the recipe lists
prepare_auto .recipelist

# Prepare list of exclusions
msg_run "Preparing excluded recipe list" recipelist.$target bitbake -g $excludetarget

cleanup="rm -f *.dot pn-buildlist"
msg_run "Dumping environment to extract ASSUME_PROVIDED" environment.$target bitbake -e
eval $(grep '^ASSUME_PROVIDED=' $logdir/environment.$target.log)

{
    $bindir/dot-to-recipes task-depends.dot $excludetarget
    for exclude in $excludes; do
        echo $exclude
    done
    for element in $ASSUME_PROVIDED; do
        echo $element
    done
} | sort -u >$excludefile
eval $cleanup

# Construct list of recipes to be processed
cleanup="rm -rf $tmpdir.recipelist $sstatedir.recipelist; rm -f *.dot pn-buildlist"
msg_run "Preparing recipe list" recipelist.$target bitbake -g $target
$bindir/dot-to-recipes task-depends.dot $target >$recipelist
eval $cleanup
cleanup=

# Prepopulate shared state
rm -rf $tmpdir.populating $sstatedir.populating
if [[ -e $tmpdir.populated ]]; then
    mv $tmpdir.populated $tmpdir.populating
fi
if [[ -e $sstatedir.populated ]]; then
    mv $sstatedir.populated $sstatedir.populating
fi
prepare_auto .populating
cleanup="mv $sstatedir.populating $sstatedir.populated; mv $tmpdir.populating $tmpdir.populated"
msg_run "Prebuilding pseudo-native" pseudo-native.$target bitbake -k pseudo-native
msg_run "Populating shared state" populating.$target bitbake -k $target
eval $cleanup
cleanup=

# Test recipes
touch $completedfile
prepare_auto .testing
while read recipe; do
    if grep -q "^$recipe$" $completedfile; then
        continue
    fi

    built_sstate=$(get_sstate $sstatedir.populated $recipe)
    if [[ -z $built_sstate ]]; then
        echo >&2 "Error: $recipe was built, but no sstate archive exists"
        exit 2
    fi

    if grep -q "^$recipe$" $excludefile || echo $recipe | grep -qE "^$excludepatterns$"; then
        echo >&2 "Skipping $recipe, as it was excluded"
    else
        msg_run "Building $recipe with its dependencies prebuilt" testing.$recipe bitbake -c populate_sysroot $recipe
        if ! recipe_stamp_exists $recipe $builttask $tmpdir.testing/stamps; then
            echo >&2 "Error: $recipe was not built from scratch"
            exit 4
        fi
        msg_run "Cleaning up $recipe" cleaning.$recipe bitbake -c cleansstate $recipe
    fi

    sstate_file=$(get_sstate $sstatedir.populated $recipe)
    if [[ -z $sstate_file ]]; then
        echo >&2 "Error: sstate archive for $recipe is missing"
        exit 3
    fi

    trimmed=$(echo $sstate_file|sed "s,^$sstatedir.populated/,,")
    mkdir -p $(dirname $sstatedir.testing/$trimmed)
    cp $sstate_file $sstatedir.testing/$trimmed

    echo $recipe >>$completedfile
done <$recipelist

# vim:set sw=4 sts=4 et:
