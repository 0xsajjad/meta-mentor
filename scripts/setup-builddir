#!/bin/bash
#
# Copyright 2007-2012 Mentor Graphics Corporation
#
# This file is licensed under the terms of the GNU General Public License
# version 2.  This program  is licensed "as is" without any warranty of any
# kind, whether express or implied.
#
# Usage: setup-builddir [BUILDDIR [MACHINE]]
#
# If machine is specified, the script will search for layers and add any
# layers with the machine configuration for this machine to the base layers
# defined in the bblayers.conf.sample in the template directory.
#
# By default, we set BB_NUMBER_THREADS to $NCPU * 1.5 and PARALLEL_MAKE to
# $NCPU * 2
JOBS_FACTOR="2"
THREADS_FACTOR="3 / 2"

declare -A priorityoverrides
# Don't let meta-oe override oe-core
priorityoverrides[openembedded_layer]=0


abspath () {
    _path="$1"
    if [ -n "${_path##/*}" ]; then
        _path="$PWD/$1"
    fi
    echo "$_path"
}

MELDIR=$(cd ${0%/*}/../.. && pwd)
BUILDDIR=$1
if [ -z $BUILDDIR ]; then
    BUILDDIR=$PWD/build
fi
BUILDDIR=$(abspath $BUILDDIR)
MACHINE=$2


declare -a all_layers
declare -a machinelayers
declare -A layerpriorities
declare -A layerpaths
declare -A layerdepends
gather_layer_data () {
    for i in $MELDIR/*/conf/layer.conf $MELDIR/*/*/conf/layer.conf; do
        if [ ! -e "$i" ]; then
            continue
        fi
        layerpath=${i%/conf/layer.conf}
        layernames="$(sed -n 's/^BBFILE_COLLECTIONS.*= "\(.*\)"/\1/p' $i)"
        if [ -z "$layernames" ]; then
            echo >&2 "Warning: layer $layerpath has no defined layer name"
            layername=${layerpath##*/}
        elif [[ "$layernames" =~ " " ]]; then
            echo >&2 "Warning: layer $layerpath has more than one layer name, not handling"
            layername=${layerpath##*/}
        else
            layername="$layernames"
        fi
        layerdeps="$(sed -n "s/^LAYERDEPENDS_$layername.*= \"\(.*\)\"/\1/p" $i)"
        layerpriority="$(sed -n "s/^BBFILE_PRIORITY_$layername.*= \"\(.*\)\"/\1/p" $i)"

        layername="${layername//-/_}"
        layerdeps="${layerdeps//-/_}"

        override="${priorityoverrides[$layername]}"
        if [ -n "$override" ]; then
            layerpriority="$override"
        elif [ -z "$layerpriority" ]; then
            layerpriority=0
        fi

        layerpaths[$layername]="$layerpath"
        layerpriorities[$layername]="$layerpriority"
        layerdepends[$layername]="$layerdeps"
        if [ -e "$layerpath/conf/machine/$MACHINE.conf" ]; then
            machinelayers=(${machinelayers[@]} $layername)
        fi
        all_layers=(${all_layers[@]} $layername)
    done
}

base_layers () {
    # Extract base layer list from bblayers.conf.sample
    sed -n '/^BBLAYERS/{s/^[^"]*"//; :start; /\\$/{s/ *\\$//; p; n; b start}; s/"//; p}' $TEMPLATECONF/bblayers.conf.sample | sed -e"s,\${MELDIR},$MELDIR,; s,##COREBASE##,$MELDIR/poky,g" | sort -u | while read layer; do
        if [ -n "$layer" -a -e "$layer" ]; then
            echo $layer
        fi
    done
}
prioritized_layers () {
    layerfile=`mktemp`
    trap "rm -f $layerfile" EXIT

    gather_layer_data

    declare -a baselayers
    base_layers >$layerfile
    while read base_layerpath; do
        layername=
        for layer in ${all_layers[@]}; do
            layerpath=${layerpaths[$layer]}
            if [ "$layerpath" = "$base_layerpath" ]; then
                layername=$layer
            fi
        done
        if [ -z "$layername" ]; then
            echo >&2 "Error: unable to find name for base layer $layerpath, aborting"
            return 2
        fi
        baselayers+=($layername)
    done <$layerfile

    includedlayers=(${baselayers[@]} ${machinelayers[@]})

    # Check for missing required dependencies
    missingdeps=0
    for layer in ${includedlayers[@]}; do
        for layerdep in ${layerdepends[$layer]}; do
            if [ -z "${layerpaths[$layerdep]}" ]; then
                missingdeps=1
                echo >&2 "Error: $layer requires layer '$layerdep', but no such layer exists, aborting"
            else
                includedlayers+=($layerdep)
            fi
        done
    done
    if [ $missingdeps -eq 1 ]; then
        return 3
    fi

    # Gather up optional layers, following their dependencies
    declare -a fromoptional
    for layer in ${OPTIONALLAYERS//-/_}; do
        if [ -n "${layerpaths[$layer]}" ]; then
            unincluded_deps=0
            for layerdep in ${layerdepends[$layer]}; do
                if ! echo "${includedlayers[@]}" | grep -qw "$layerdep"; then
                # if [[ "${includedlayers[*]}" !~ "\b$layerdep\b" ]]; then
                    unincluded_deps=1
                fi
            done
            if [ $unincluded_deps -eq 0 ]; then
                echo "Including optional layer '${layerpaths[$layer]}'" >&2
                includedlayers+=($layer)
            fi
        fi
    done

    for layer in ${includedlayers[@]}; do
        layerpriority=${layerpriorities[$layer]}
        layerpath=${layerpaths[$layer]}
        echo $layerpriority $layerpath
    done | sort -n -r | cut -d" " -f2- | uniq
}

# We'll be reconfiguring the build directory, so let the user back out
if [ -n "$MACHINE" ] &&
   [ -e $BUILDDIR/conf/bblayers.conf -o -e $BUILDDIR/conf/layer.conf ] &&
   [ "$MACHINE" != "$(sed -n '/^MACHINE /s/.*"\(.*\)"/\1/p' $BUILDDIR/conf/local.conf 2>/dev/null)" ]; then
    echo >&2 "Build directory is configured, but machine was specified."
    while true; do
        read -p "Reconfigure for $MACHINE (Y|n)? " reconfigure
        case $reconfigure in
            [nN])
                echo >&2 "Aborting at user request"
                exit 2
                ;;
            ""|[yY])
                break
                ;;
            *)
                echo >&2 "Invalid input: $reconfigure"
                ;;
        esac
    done
fi

mkdir -p $BUILDDIR/conf
if [ ! -e $BUILDDIR/conf/local.conf ]; then
    cp $TEMPLATECONF/local.conf.sample $BUILDDIR/conf/local.conf
    echo "You had no local.conf file. This configuration file has therefore been"
    echo "created for you with some default values."

    NCPU=`grep -c processor /proc/cpuinfo`
    JOBS=`expr $NCPU \* $JOBS_FACTOR`
    THREADS=`expr $NCPU \* $THREADS_FACTOR`
    sed -i -e"s/^#*PARALLEL_MAKE *?*=.*/PARALLEL_MAKE ?= \"-j$JOBS\"/" $BUILDDIR/conf/local.conf
    sed -i -e"s/^#*BB_NUMBER_THREADS *?*=.*/BB_NUMBER_THREADS ?= \"$THREADS\"/" $BUILDDIR/conf/local.conf
else
    if [ -n "$MACHINE" ]; then
        echo "Reconfiguring existing local.conf for $MACHINE"
    fi
fi
if [ -n "$MACHINE" ]; then
    sed -i -e"s/^#*MACHINE *?*=.*/MACHINE ??= \"$MACHINE\"/" $BUILDDIR/conf/local.conf
fi

if [ ! -e $BUILDDIR/conf/bblayers.conf ]; then
    echo "MELDIR = \"$MELDIR\"" >$BUILDDIR/conf/bblayers.conf
    echo >>$BUILDDIR/conf/bblayers.conf
    cat $TEMPLATECONF/bblayers.conf.sample >>$BUILDDIR/conf/bblayers.conf
    echo "You had no bblayers.conf file. This configuration file has therefore been"
    echo "created for you with some default values."
else
    if [ -n "$MACHINE" ]; then
        echo "Reconfiguring existing bblayers.conf for $MACHINE"
    fi
fi

if [ -n "$MACHINE" ]; then
    # Remove existing BBLAYERS
    sed -i -n '/^BBLAYERS/{n; :start; /\\$/{n; b start}; /^ *"$/d; :done}; p' $BUILDDIR/conf/bblayers.conf
    echo 'BBLAYERS = "\' >> $BUILDDIR/conf/bblayers.conf
    prioritized_layers | while read layer; do
        echo "    $layer \\" >> $BUILDDIR/conf/bblayers.conf
    done
    echo '"' >> $BUILDDIR/conf/bblayers.conf
fi

if [ ! -e $BUILDDIR/conf/site.conf -a -e $TEMPLATECONF/site.conf ]; then
    echo "You had no site.conf file, but one exists in the template directory."
    echo "This file has been copied into your build directory."
    cp $TEMPLATECONF/site.conf $BUILDDIR/conf/site.conf
fi
